# -*- coding: utf-8 -*-
"""NetflixAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M3CZz9DAA5Rgj-p28dZ4lQhYoyiyNURy

## Install and Import
"""

!pip install pandas matplotlib seaborn plotly --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import re
from google.colab import files

"""## Theme setup"""

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (10,5)

"""## Upload and Load Dataset"""

uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_csv(file_name)

print(" Data Loaded Successfully")
print("Rows:", df.shape[0], "Columns:", df.shape[1])
df.head()

"""## Data Preprocessing

"""

df.columns = df.columns.str.strip().str.replace(' ', '_')

# Handle missing/blank values
df.replace(['', ' ', 'NA', 'NaN', 'nan'], np.nan, inplace=True)

# Extract year
def extract_year(x):
    try:
        return pd.to_datetime(x, errors='coerce').year
    except:
        return np.nan
df['release_year'] = df['Release_Date'].apply(extract_year)

# Clean category names
df['Category'] = df['Category'].astype(str).str.strip().str.title()

# Convert movie durations to numeric minutes
def extract_minutes(x):
    if pd.isna(x): return np.nan
    m = re.search(r'(\d+)\s*min', str(x), re.IGNORECASE)
    return int(m.group(1)) if m else np.nan
df['duration_minutes'] = df['Duration'].apply(extract_minutes)

# Fill some missing categorical data
# Fill missing categorical data safely
df.fillna({
    'Country': 'Unknown',
    'Rating': 'Not Rated',
    'Type': 'Unspecified'
}, inplace=True)

print("\nâœ… Preprocessing done.")
df.info()

"""## Interactive Visualizations"""

# Movies vs TV Shows
fig1 = px.histogram(df, x="Category", color="Category",
                    title="Movies vs TV Shows on Netflix",
                    color_discrete_sequence=['#636EFA', '#EF553B'])
fig1.show()

#Titles Added per Year
year_counts = df['release_year'].value_counts().sort_index()
fig2 = px.bar(x=year_counts.index, y=year_counts.values,
              labels={'x':'Year', 'y':'Number of Titles'},
              title="Netflix Content Growth Over Years",
              color=year_counts.values,
              color_continuous_scale='viridis')
fig2.show()

#Top 10 Countries
top_countries = df['Country'].value_counts().head(10)
fig3 = px.bar(x=top_countries.values, y=top_countries.index,
              orientation='h', title="Top 10 Content-Producing Countries",
              labels={'x':'Number of Titles', 'y':'Country'},
              color=top_countries.values, color_continuous_scale='plasma')
fig3.show()

#Top 10 Genres
df_genres = df.dropna(subset=['Type']).copy()
df_genres['Genre'] = df_genres['Type'].str.split(',')
df_genres = df_genres.explode('Genre')
df_genres['Genre'] = df_genres['Genre'].str.strip()

top_genres = df_genres['Genre'].value_counts().head(10)
fig4 = px.bar(x=top_genres.values, y=top_genres.index,
              orientation='h', title="Top 10 Genres on Netflix",
              color=top_genres.values, color_continuous_scale='magma')
fig4.show()

#Interactive Timeline: Movie vs TV Show
trend = df.groupby(['release_year','Category']).size().reset_index(name='Count')
fig5 = px.line(trend, x='release_year', y='Count', color='Category',
               markers=True, title="Trend of Movies vs TV Shows Over Years")
fig5.show()

"""## Data Filtering with Interactivity"""

# Example filter widgets (useful in Colab)
country_input = input("Enter a country to analyze (e.g., India): ").title()

filtered = df[df['Country'].str.contains(country_input, case=False, na=False)]
print(f"\nðŸŽ¬ Showing first 10 records for {country_input}:")
display(filtered[['Title','Category','release_year','Rating','Type']].head(10))

# Plot trend for that country
if not filtered.empty:
    c_trend = filtered.groupby(['release_year','Category']).size().reset_index(name='Count')
    fig6 = px.line(c_trend, x='release_year', y='Count', color='Category',
                   title=f"{country_input} - Movies vs TV Shows Trend")
    fig6.show()
else:
    print(f"No records found for {country_input}")

"""## Automated Insights Summary"""

print("AUTOMATED INSIGHTS")

total_titles = len(df)
movies = len(df[df['Category']=='Movie'])
tvshows = len(df[df['Category']=='Tv Show'])
top_country = df['Country'].value_counts().idxmax()
top_genre = df_genres['Genre'].value_counts().idxmax()
latest_year = int(df['release_year'].max())

print(f"â€¢ Total content analyzed: {total_titles} titles.")
print(f"â€¢ Movies: {movies} ({movies/total_titles*100:.1f}%) | TV Shows: {tvshows} ({tvshows/total_titles*100:.1f}%)")
print(f"â€¢ Top contributing country: {top_country}")
print(f"â€¢ Most common genre: {top_genre}")
print(f"â€¢ Most recent data year: {latest_year}")

# Trend pattern insight
growth = df['release_year'].value_counts().sort_index()
if growth.iloc[-1] > growth.iloc[-2]:
    print("â€¢ Content addition increased in the latest year â€” steady growth trend.")
else:
    print("â€¢ Content addition decreased recently â€” possible slowdown in new additions.")

# Country diversity insight
unique_countries = df['Country'].nunique()
if unique_countries > 100:
    print(f"â€¢ Netflix has highly global content presence ({unique_countries} countries).")
else:
    print(f"â€¢ Content mostly comes from a limited set of {unique_countries} countries.")

# Duration insight
avg_dur = df['duration_minutes'].mean(skipna=True)
if avg_dur:
    print(f"â€¢ Average movie duration: {avg_dur:.1f} minutes.")

print("\nâœ… Interactive analysis and insights complete!")

